Merci a franck laboratory pour ce tutoriel
https://www.youtube.com/watch?v=VXWvfrmpapI&ab_channel=Frankslaboratory

I JavaScript & HTML canvas visualiser que nous allons frabriquer
Pour les amoureux de la musique et de Javascript découvré La puissance de canvas et Vanila JavaScript en crént un visualiseur de fréquence Audio avec moi pour découvrir les base de l'Audio avec JS et pouvoir ensuite créer une application du type melodyMaker.

II Coment jouer des fichier audio en JavaScript
Pour commencer vous devez créer le classique html5: style.css script.js
Inserer une div#boutton1 dans le html 
un body{ black } dans le style css
une constante button1 = get#boutton1 dans le script.js et un evenement boutton1('click') avec une callback fonction qui contient le code pour jouer le fichier son.

Ensuite il faut créer une nouvelle variable let audio1 = new Audio(). new est un mot clé séciale en JS et Audio est un constructeur de classe intégré qui servira a créer une nouvelle instance de classe audio en JS qui créera un nouvel HTML vierge ce qui est pareille qu'écrire une balise audio html dans notre index.html. Cet objet peut etre attaché a une page Web pour que l'utilisateur puisse interAgir avec ou il peut simplement rester hors ecran. 

Pour que le son puisse etre jouer on doit définir une source a notre audio1.src qui contient le chemin d'une source sonore ( mp3, ogg, aiff, wav .... ). 
Pour ce projet vous pouver prendre un échantillons sonores sur OpenGamesArt.com et choisir un son court et puissant pour voir une belle plage de frequence. 
J'en choisis un, je l'enregistre et maintenant je place son chemin  dans audio1.src = ... Puis je vais dans l'evenementClique du button1 pour lire le son contenuu dans la variable audio1 avec la methode audio1.play(). 

III Media event sur un element audio
Et vous pouvez egalement prendre la variable audio1 et écouter l'evenement ('playing') et ('ended') Et on peut verifier avec un console.log quand le son et jouer et quand le son a fini d ejouer. 

IV Jouer un son depuis une chaine de caractere base64
Dans ce tutoriel vous avez vu les base du son en javascript et vous allez voir comment créer des visualiseurs audios. 
Certains navigateur ne nous permette pas d'afficher des image depuis un fichier son pour des raison de securité. 
Il faut dans un premier temps analyser le fichier pour avoir des infos sur les fréquences etc.
On peut contourner ce probleme en convertissant un fichier audio en base64, malheuresement la chaine de caractere otenue est tres longue meme pour un son de quelques secondes.
La 2e façon de contourner le probleme et de créer un element html d'upload de fichier 

Rechercher sur google audioToBase64 pour convertir un fichier audio en base64

Quand nous prenons notre objet audio1 le newaudio() créer un fichier audio en html vierge. 
Et on définissait la source dans audio.src. 
On pouvez en realité effacer le audio.src et envoyer la chaine de caractere Base64 pour lier le son directement dans l'objet new Audio('data:audio/x-wav;base64,maChaineBase64')  ( Est ce que ça marche avec un URL ??? )


V Généré du son avec la Web Api Audio
Avec JS on peut générer du son par du code
Les ajuster pour les faire sonner comme des instruments de musique. ça peut être utile pour les jeux video ou la génération de projet artistique.

Pour générer du son nous devons créer un div#button2 dans html et une const button2 = get#button2 
un evenement #button2(click, playSound) ou la fonction playSound{ audio1.play() }
Pour generer du son nous allons utiliser la WebAudioApi() qui fonctionne sur un principe de nouedsAudio. 
On vas commencer par un exemple simple. 
On créer une constante audioCtx = new AudioContext();
Pour generer du son j'entre dans la fonction playsound() pour y ajouter 
{ const osciliattor = audio.ctx.createOscilliator(); // On créer un osciliateur que nous connectons
  osciliator.connect(audioCtx.destination); // Nous connectons l'osciliateur au haut parleurs
  osciliator.type = 'triangle'; // On envoie une onde de type traingle
  osciliator start(); On joue le son 
  setTieout(function(){
      osciliator.stop();
  }, 1000) // et on l'arrete au bout de 1000ms
}

VI JS Mettre en place un projet de visualiser audio

On créer un  #container > canvas#canvas1 dans le html
On créer également un audio#audio1 on supprime l'attribut source et on ajout le mot clé controls pour les rendre visible sur la page Web 
Dans le style css je supprime le selecteur body et je met les regles :
* { margin : 0; padding : 0; box-sizing: border-box; }
#container { position: absolute; top: 0; left: 0; background: black; width : 100%; height: 100%; }
... cf style.css
Au inveau du JavaScript je garde seulement les 3 ligne de codes.
let audio1 = newAudio(base64);
const audioCtx = new AudioContext();
console.log(audioCtx);

Et j'ajoute : 

const container =  get#container
const canvas = get#canvas1 canvas est une element html spéciale qui créer un champs ou nous pouvons dessiné des formes animé interactives. Par default le canvas a une taille de 150 * 300 pixels.
Donc si je veux que ma toile couvre la fenetre du navigateur, je dois définir la largeur et la hauteur de la de la toile avec 
canvas.width = window.InnerWidth; 
canvas.height = 

Comme le canavs de l'API audio web de JS fonctionne comme un enssemble de methode et propriété intégré que les navigateur web peuvent comprendre. 
'2D' and 'WebGL' API sont séparé et fonctionne de façon differentes. 
Ici nous allons utilsé la methode de dessin 2D pour créer nos visualiseur.
const ctx = canvas.getContext('2D');

Ensuite nous créons 2 variables que nous laissons vide : 
let audioSource;
let analyser;

Maintenant créons un evenement simple pour que le son soit jouer quand on clique n'importe ou sur la page web. Pour cela nous allons créer un evenement au clique sur l'élement .container que nous avons déclaré car cet élement couvre la page entiere. Et nous y insérons une callBack fonction qui contient le code audio1.play(); 

"Quelles est la difference entre webGL et 2D ?


VII Visualisation des frequences sonore avec FFT

Pour analyser et générer des forme qui bouge selon le son nous devons : 

Prendre la variable audioSource précédément declarer et y intégrer 
audioSource = audioContext.createMediaElementSource(audio1) // Pour déclarer une source audio depuis la variable audio1 contenant le code base64 pour y créer un noeud audio en JS ( truc compliquer a voir ) 

Ensuite je prend la variable analyser = audioContext.createAnalyseur(); // Pour recupérer les donnée audio de temps de fréquences que nous utiliserons plus tard pour notre visualiseur.  

Ensuite je connecte audioSource a analyser  pour exposer la synchronisation et les fréquence sur ce fichier sous forme d'objet de donnée. Avec audioSource.connect(analyser);
 
Ensuite je connecte analyser avec audioCtx.destination (périphérique audio par default donc les hauts parleur du PC ) // analyser.connect(audioContext.destination);

Ensuite avec analyzer.fftSize une propriété spéciale qui reprensente le nombre d'échantillons audio que nous voulons dans notre fichier de donnée ( 248 est la valeur par default mais nous pouvons mettre une des ces valeurs 32, 64 .... 32768 ) Plus le nombre sera éleve plus nous aurons de bar qui analyse le son dessiner sur le canvas 
Je créer une constante bufferLenght pour la mémoire tampon = analyser.frequencyBinCount; // frequencyBinCount Pour convertir dans un format spéciale
( La valeur buffer.Lenght = la moitié de fftSize ) et il represente le nombre de bar 
Ensuite je créer une variable dataArray = Uint8Array(bufferLenght) pour récupérer les donnée formaté envoyer par mon analyseur dans un type de tableau Uint8 ( Peut cotenir seulement des entier 8bits )

Maintenant nous pouvons jouer avec le canvas pour afficher les barre de fréquence du son jouer.


VIII Bar visualiser on HTML Canvas

Maintenant je veux créer un effet de visualisation tres basique pour comprendre ce que se passe. Et ensuite nous joueron avec les tailles les filtres etc. 

Je veut que les barre de notre visualiseur et des  barre qui pousse du bas de la toile vers le haut. 

La premiere version sera un visualiseur Habituel que l'on voit de partout. 

Pour cela : 
Toujours dans la fonction au click de notre container,  j'ajoute une const barwidth = canvas.width/bufferLenght // ça reprensete une seu barre de notre visualiseur et comme nous l'avons vu tout a l'heure la longueur du tampon represent le détails que nous voyons sur nos frequence dans notre fichier son analyser. Chaque point de donnée representera une barre dans notre visualiseur. 
La largeur de notre barre reprensete la largeur de la toile, divisé par le nombre d'échantillons donnée dont nous disposons. 

Nous avons egalement besoin de la hauteur de la barre, avec une variable let ( car la valeur change tout le temps ) 
let barHeight; 
Nous avons aussi besoin d'une variable x qui represente les coordonnée horizontale, a chaque fois que je dessinerai une barre je sauterai horizontalement de la largeur de la barre afin de desisner des barre les une a coté des autres.

Pour animer la barre j'insère la fonction animate() qui augmentera la taille des barre quand les frequence changeront. Grace a un boucle d'animation. 
D'abord je veux effacer le vieux canevas donc je prend la variable ctx et j'intègre la methode clearRect(0, 0, canvas.width, canvas.height) Cette methode prend 4 valeurs pour determiner la toile que nous voulons nettoyer. 
La je veut tout effacer donc je commence aux coordonnées 0 0 et je prend la longeur et la hauteur du canvas. 

Ensuite j'apelle la variable analyser et j'integre la methode getByteFrequencyData et je lui passe un tableau de donnée formaté. ( const dattaArray = new Uint8Array .... ) pour qu'il copie les donnée de fréquences. 

Ensuite je créer une for loop avec le nombre de bufferLenght qui correspond a la moitié du fftSize et chaque entier est un element 8 bit non affeté c'est un nombre compris entre 0 et 225 ( ce nombre correspond au decibel de chaque frequence ) 

Et dans cette for loop je prend la hauteur de la loop (barHeight) et je la rend égale au 8bit de la const dataArray (Des son fort represente des barres plus lngues ) barHeight = dataArray[i];

Ensuite je definis les barre de couleur blanche 
ctx.fillStyle = "white";
Ensuite j'utilise la methode fillRectangle qui prend la largeur et la hauteur xy et dessine un rectangle sur le canvas
ctx.fillRect(x, canvas.height - barHeight, barWidht, barHeight) = 

Nous somme a l'interieur d'une boucle qui parcours l'enssemble du tableau de donnée, donc ce rectangle sera ecrit pour chaque point de donnée de fréquences. 
x sera l'horizontale et la verticale sera la hauteur du canvas - la hauteur de la barre 

Cette boucle créer 32 barre de son dont certaine peuvent mesurer 0 pixel si il n'y a pas de beaucoup de decibel

Chaque fois que je dessine une barre je prend la variable x de la ligne 25 et je l'increment de la largeur de la barre cela mettra les barres les une a coté des autres horizontalement 
x += barWidth 

Et pour que les barre s'afiche je place dans mon evenement une const get#audio1 
et audio1.src = codeBase64

Ensuite je fait un requestAnimationFrame(animate) et je donne le nom de la fonction en argument

Je verifie que let x se rinitialise a 0 a chaque fois que la boucle tourne




IX Chargé de long fichier audio dans le visualiseur 



X Animer les couleur selon le son


XI Visualiseur de cercle


XII Expreience de coding creatif 


Un super site pour trouver des ressources sonore visuelle 
https://opengameart.org/

Convertir un fichier audio en base64
https://base64.guru/converter/encode/audio

La Web Audio API
https://developer.mozilla.org/fr/docs/Web/API/Web_Audio_API

Astuce
Alt+Z permet de raccourci une ligne sur visual studiocode

Couleur Hue c'est quoi ? 

